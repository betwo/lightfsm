name: continuous_integration

on:
  push:
  schedule:
    # build every night at 0:00
    - cron: "0 0 * * *"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        compiler:
          [
            "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++",
            "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++",
          ]
        build-tool: ["catkin_tools", "catkin"]
    steps:
      - name: "determine_ros_version"
        id: determine_ros_version
        run: |
          if ${{ contains(matrix.os, '18.04') }} ; then
          echo "melodic" ;
          echo "::set-output name=ros_version::melodic" ;
          elif ${{ contains(matrix.os, '20.04') }} ; then
          echo "noetic" ;
          echo "::set-output name=ros_version::noetic" ;
          else
          echo "::set-output name=ros_version::undefined" ;
          echo "::error::Unsupported Ubuntu / ROS version" ;
          fi
      - uses: actions/checkout@v1
        with:
          path: ws/src/lightfsm
      - name: upgrade_compiler
        if: ${{ contains(matrix.os, '18.04') && contains(matrix.compiler, 'clang') }}
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository -y 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
          sudo apt-get update -y
          apt list | grep clang
          sudo apt-get install -y clang-15
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 50
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 50
      - uses: betwo/github-setup-catkin@master
        with:
          ros-version: ${{ steps.determine_ros_version.outputs.ros_version }}
          build-tool: ${{ matrix.build-tool }}
          workspace: $HOME/work/lightfsm/ws
      - name: build_catkin
        if: ${{ matrix.build-tool == 'catkin' }}
        run: |
          cd $HOME/work/lightfsm/ws
          catkin_make_isolated ${{ matrix.compiler }}
      - name: build_catkin_tools
        if: ${{ matrix.build-tool == 'catkin_tools' }}
        run: |
          cd $HOME/work/lightfsm/ws
          catkin build --no-status --no-notify --summarize --continue-on-failure --cmake-args ${{ matrix.compiler }}

      - name: get_test_coverage
        if: ${{ matrix.build-tool == 'catkin_tools' && contains(matrix.os, '20.04') && contains(matrix.compiler, 'clang')  }}
        run: |
          sudo apt-get update
          sudo apt-get install lcov
          source $HOME/work/lightfsm/ws/src/lightfsm/tests/coverage.sh
          echo $COVERAGE
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: upload_coverage_output
        uses: actions/upload-artifact@v3
        if: ${{ matrix.build-tool == 'catkin_tools' && contains(matrix.os, '20.04') && contains(matrix.compiler, 'clang')  }}
        with:
          name: coverage
          path: /home/runner/work/lightfsm/ws/src/lightfsm/tests/coverage/
          retention-days: 1